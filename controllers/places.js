const mongoose = require("mongoose");
const { validationResult } = require("express-validator");

const HttpError = require("../models/HttpError");
const Place = require("../models/place");
const User = require("../models/user");

let DummyPlaces = [
  { id: "p1", title: "empire state building", creator: "u1" },
  { id: "p2", title: "grand prismatic building", creator: "u2" },
];

const getPlacesByUserId = async (req, res, next) => {
  const { userID } = req.params;
  let places;
  try {
    places = await Place.find({ creator: userID });
  } catch (err) {
    const error = new HttpError(
      "Fetching places from the user failed, please try again later",
      500
    );
    return next(error);
  }
  if (!places || places.length === 0) {
    // return res.json({ message: "Place not found by this user" });
    const error = new HttpError("This user has no places found", 404);
    return next(error);
  }

  // mapped the array to use the toObject on each element of the places of the user
  res.json({
    places: places.map((place) => place.toObject({ getters: true })),
  });
};
const getPlaceById = async (req, res, next) => {
  const placeID = req.params.placeID;
  let place;
  try {
    place = await Place.findById(placeID);
  } catch (err) {
    const error = new HttpError(
      "Something went wrong, could not find a place.",
      500
    );
    return next(error);
  }
  //  sending more than one response will cause an error so you need to return which is return next(error) instead
  if (!place) {
    // return res.json({ message: "Place not found" });
    const error = new HttpError("Place with this id is not found", 404);
    return next(error);
  } else {
    return res.json({ place });
  }
};
const getAllPlaces = (req, res, next) => {
  return res.json({ places: DummyPlaces });
};
const createPlace = async (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return next(new HttpError("Invalid input please check your data", 422));
  }
  const { title, address, creator, location, description } = req.body;
  const createdPlace = new Place({
    // id: uuid.v4(), // will be generated by mongoose automatically
    title: title,
    address: address,
    creator: creator,
    location: location,
    description: description,
    image:
      "https://www.google.com/url?sa=i&url=https%3A%2F%2Fmodii.org%2Fen%2Frandom-2%2F&psig=AOvVaw0Xss2aQHfSj_5crXbv5ZlX&ust=1704185181917000&source=images&cd=vfe&opi=89978449&ved=0CBEQjRxqFwoTCPihu9nmu4MDFQAAAAAdAAAAABAD",
  });

  // default normal success  status code is 200
  // 201 means it created something successfully

  // unshift() will push the element at the first place of the array not the last like push

  // check the _id of the creator is found in the collection of users or not

  let user;
  try {
    user = await User.findById(creator);
  } catch (err) {
    const error = new HttpError(
      "Something went wrong , please try again.",
      500
    );
    return next(error);
  }
  if (!user) {
    return next(
      new HttpError("Could not find the creator by the given id.", 404)
    );
  }

  try {
    /* 
sessions and transactions are a way to do more than one thing at the same time if one fails the whole operations will fail

*/

    const sess = await mongoose.startSession();
    await sess.startTransaction();
    await createdPlace.save({ session: sess });

    user.places.push(createdPlace);
    // mongoose won't push the whole js document like you would do using normal js arrays but only the _id of the place to the array

    await user.save({ session: sess });

    await sess.commitTransaction();
  } catch (err) {
    const error = new HttpError(
      "Something went wrong , please try again.",
      500
    );
    return next(error);
  }

  try {
    await createdPlace.save();
  } catch (err) {
    const error = new HttpError(
      "Creating place failed, please try again.",
      500
    );
    return next(error);
  }

  res.status(201).json({ place: createdPlace });
};
const updatePlace = async (req, res, next) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return next(new HttpError("Invalid input please check your data", 422));
  }
  const { title, description } = req.body;

  let place;
  try {
    place = await Place.findById(req.params.pid);
  } catch (err) {
    const error = new HttpError(
      "Something went wrong, could not update place.",
      500
    );
    return next(error);
  }

  place.title = title;
  place.description = description;

  try {
    await place.save();
  } catch (err) {
    const error = new HttpError(
      "Something went wrong, could not update place.",
      500
    );
    return next(error);
  }

  res.json({ place: place.toObject({ getters: true }) });
};
const deletePlace = async (req, res, next) => {
  let place;
  try {
    place = await Place.findById(req.params.pid);
  } catch (err) {
    const e = new HttpError(
      "Something went wrong while deleting the place",
      500
    );
    return next(e);
  }
  try {
    await place.remove();
  } catch (err) {
    const e = new HttpError(
      "Something went wrong while deleting the place",
      500
    );
    return next(e);
  }

  res.status(200).json({ message: "Place Deleted" });
};
exports.createPlace = createPlace;
exports.getPlaceById = getPlaceById;
exports.getPlacesByUserId = getPlacesByUserId;
exports.getAllPlaces = getAllPlaces;
exports.updatePlace = updatePlace;
exports.deletePlace = deletePlace;
